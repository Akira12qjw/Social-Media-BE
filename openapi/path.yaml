openapi: 3.0.3
info:
  title: Twitter Clone - OpenAPI 3.0
  description: API documentation for Twitter Clone application
  version: 1.0.11
servers:
  - url: http://localhost:4000
    description: Local development server
  - url: https://social-media-be-lilac.vercel.app
    description: Production server
tags:
  - name: users
    description: User management APIs
  - name: tweets
    description: Tweet management APIs
  - name: medias
    description: Media handling APIs
  - name: likes
    description: Like management APIs
  - name: bookmarks
    description: Bookmark management APIs
paths:
  /users/login:
    post:
      tags:
        - users
      summary: User login
      description: Authenticate user and return access tokens
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginBody"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login success
                  result:
                    $ref: "#/components/schemas/SuccessAuthentication"
        "422":
          description: Invalid input
        "401":
          description: Unauthorized

  /users/register:
    post:
      tags:
        - users
      summary: Register new user
      description: Create a new user account
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: "123456Akirak@"
                confirm_password:
                  type: string
                  example: "123456Akirak@"
                name:
                  type: string
                  example: "John Doe"
                date_of_birth:
                  type: string
                  format: ISO8601
                  example: "1990-01-01T00:00:00Z"
      responses:
        "201":
          description: User registered successfully
        "422":
          description: Invalid input
        "409":
          description: Email already exists

  /users/me:
    get:
      tags:
        - users
      summary: Get current user profile
      description: Retrieve the authenticated user's profile information
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
    patch:
      tags:
        - users
      summary: Update current user profile
      description: Update the authenticated user's profile information
      operationId: updateMe
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                date_of_birth:
                  type: string
                  format: ISO8601
                  example: "1990-01-01T00:00:00Z"
                bio:
                  type: string
                  example: "This is my bio"
                location:
                  type: string
                  example: "San Francisco"
                website:
                  type: string
                  example: "https://example.com"
                username:
                  type: string
                  example: "johndoe"
                avatar:
                  type: string
                  example: "http://localhost:4000/images/avatars/avatar.jpg"
                cover_photo:
                  type: string
                  example: "http://localhost:4000/images/covers/cover.jpg"
      responses:
        "200":
          description: Profile updated successfully
        "401":
          description: Unauthorized
        "422":
          description: Invalid input

  /tweets:
    post:
      tags:
        - tweets
      summary: Create new tweet
      description: Create a new tweet
      operationId: createTweet
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: number
                  enum: [0, 1, 2]
                  example: 0
                audience:
                  type: number
                  enum: [0, 1]
                  example: 0
                content:
                  type: string
                  example: "Hello, Twitter!"
                parent_id:
                  type: string
                  format: MongoId
                  example: "64be0ad2e43d2464394feedb"
                hashtags:
                  type: array
                  items:
                    type: string
                  example: ["twitter", "clone"]
                mentions:
                  type: array
                  items:
                    type: string
                    format: MongoId
                  example: ["64be0ad2e43d2464394feedb"]
                medias:
                  type: array
                  items:
                    type: string
                  example: ["http://localhost:4000/images/tweets/image.jpg"]
      responses:
        "201":
          description: Tweet created successfully
        "401":
          description: Unauthorized
        "422":
          description: Invalid input
    get:
      tags:
        - tweets
      summary: Get new feeds
      description: Get paginated new feeds for authenticated user
      operationId: getNewFeeds
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: New feeds retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TweetList"
        "401":
          description: Unauthorized
        "422":
          description: Invalid input

  /tweets/{tweet_id}:
    get:
      tags:
        - tweets
      summary: Get tweet by ID
      description: Get detailed information about a specific tweet
      operationId: getTweet
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        "200":
          description: Tweet retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TweetWithUser"
        "404":
          description: Tweet not found
        "422":
          description: Invalid input

  /tweets/{tweet_id}/children:
    get:
      tags:
        - tweets
      summary: Get tweet children
      description: Get replies/retweets for a specific tweet
      operationId: getTweetChildren
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema:
            type: string
            format: MongoId
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Tweet children retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TweetList"
        "404":
          description: Tweet not found
        "422":
          description: Invalid input

  /users/follow:
    post:
      tags:
        - users
      summary: Follow user
      description: Follow another user
      operationId: followUser
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                followed_user_id:
                  type: string
                  format: MongoId
                  example: "64be0ad2e43d2464394feedb"
      responses:
        "200":
          description: Successfully followed user
        "401":
          description: Unauthorized
        "422":
          description: Invalid input

  /users/follow/{user_id}:
    delete:
      tags:
        - users
      summary: Unfollow user
      description: Unfollow another user
      operationId: unfollowUser
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        "200":
          description: Successfully unfollowed user
        "401":
          description: Unauthorized
        "422":
          description: Invalid input

  /users/verify-email:
    post:
      tags:
        - users
      summary: Verify email
      description: Verify user's email address
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email_verify_token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        "200":
          description: Email verified successfully
        "422":
          description: Invalid input

  /users/forgot-password:
    post:
      tags:
        - users
      summary: Forgot password
      description: Request password reset
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        "200":
          description: Password reset email sent
        "422":
          description: Invalid input

  /users/reset-password:
    post:
      tags:
        - users
      summary: Reset password
      description: Reset user's password using token
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "newPassword123"
                confirm_password:
                  type: string
                  example: "newPassword123"
                forgot_password_token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        "200":
          description: Password reset successfully
        "422":
          description: Invalid input

  /users/change-password:
    put:
      tags:
        - users
      summary: Change password
      description: Change user's password
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: "oldPassword123"
                password:
                  type: string
                  example: "newPassword123"
                confirm_password:
                  type: string
                  example: "newPassword123"
      responses:
        "200":
          description: Password changed successfully
        "401":
          description: Unauthorized
        "422":
          description: Invalid input

  /users/logout:
    post:
      tags:
        - users
      summary: User logout
      description: Logout user and invalidate tokens
      operationId: logout
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        "200":
          description: Logout successful
        "401":
          description: Unauthorized
        "422":
          description: Invalid input

  /medias/upload-image:
    post:
      tags:
        - medias
      summary: Upload image
      description: Upload an image file
      operationId: uploadImage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file to upload
      responses:
        "200":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Upload image success
                  result:
                    type: object
                    properties:
                      url:
                        type: string
                        example: "http://localhost:4000/images/avatars/image.jpg"
        "401":
          description: Unauthorized
        "422":
          description: Invalid input

  /medias/upload-video:
    post:
      tags:
        - medias
      summary: Upload video
      description: Upload a video file
      operationId: uploadVideo
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  type: string
                  format: binary
                  description: Video file to upload
      responses:
        "200":
          description: Video uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Upload video success
                  result:
                    type: object
                    properties:
                      url:
                        type: string
                        example: "http://localhost:4000/videos/video.mp4"
        "401":
          description: Unauthorized
        "422":
          description: Invalid input

  /medias/upload-video-hls:
    post:
      tags:
        - medias
      summary: Upload video with HLS
      description: Upload a video file with HLS streaming support
      operationId: uploadVideoHLS
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  type: string
                  format: binary
                  description: Video file to upload
      responses:
        "200":
          description: Video uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Upload video HLS success
                  result:
                    type: object
                    properties:
                      url:
                        type: string
                        example: "http://localhost:4000/videos/hls/video.m3u8"
        "401":
          description: Unauthorized
        "422":
          description: Invalid input

  /medias/video-status/{id}:
    get:
      tags:
        - medias
      summary: Get video processing status
      description: Get the processing status of an uploaded video
      operationId: getVideoStatus
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        "200":
          description: Video status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get video status success
                  result:
                    type: object
                    properties:
                      status:
                        type: string
                        enum: [pending, processing, completed, failed]
                        example: "processing"
                      progress:
                        type: number
                        minimum: 0
                        maximum: 100
                        example: 50
        "401":
          description: Unauthorized
        "404":
          description: Video not found
        "422":
          description: Invalid input

  /likes:
    post:
      tags:
        - likes
      summary: Like a tweet
      description: Like a specific tweet
      operationId: likeTweet
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tweet_id:
                  type: string
                  format: MongoId
                  example: "64be0ad2e43d2464394feedb"
      responses:
        "200":
          description: Tweet liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Like tweet success
                  result:
                    type: object
                    properties:
                      like_id:
                        type: string
                        format: MongoId
                        example: "64be0ad2e43d2464394feedb"
        "401":
          description: Unauthorized
        "404":
          description: Tweet not found
        "422":
          description: Invalid input

  /likes/tweets/{tweet_id}:
    delete:
      tags:
        - likes
      summary: Unlike a tweet
      description: Remove like from a specific tweet
      operationId: unlikeTweet
      security:
        - BearerAuth: []
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        "200":
          description: Tweet unliked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unlike tweet success
        "401":
          description: Unauthorized
        "404":
          description: Tweet not found
        "422":
          description: Invalid input

  /bookmarks:
    post:
      tags:
        - bookmarks
      summary: Bookmark a tweet
      description: Add a tweet to user's bookmarks
      operationId: bookmarkTweet
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tweet_id:
                  type: string
                  format: MongoId
                  example: "64be0ad2e43d2464394feedb"
      responses:
        "200":
          description: Tweet bookmarked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bookmark tweet success
                  result:
                    type: object
                    properties:
                      bookmark_id:
                        type: string
                        format: MongoId
                        example: "64be0ad2e43d2464394feedb"
        "401":
          description: Unauthorized
        "404":
          description: Tweet not found
        "422":
          description: Invalid input

  /bookmarks/tweets/{tweet_id}:
    delete:
      tags:
        - bookmarks
      summary: Remove bookmark
      description: Remove a tweet from user's bookmarks
      operationId: unbookmarkTweet
      security:
        - BearerAuth: []
      parameters:
        - name: tweet_id
          in: path
          required: true
          schema:
            type: string
            format: MongoId
      responses:
        "200":
          description: Bookmark removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Remove bookmark success
        "401":
          description: Unauthorized
        "404":
          description: Tweet not found
        "422":
          description: Invalid input
